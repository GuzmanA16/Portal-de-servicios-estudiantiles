@page "/login"

@* @using TORO.Authentication;
@inject IUserAccountService userAccountService
@inject AuthenticationStateProvider authStateProvider *@

<style>
    body{
        background-image: url('fondo1.png'); /* Reemplaza con la ruta de tu imagen */
        background-size: cover;
        background-repeat: no-repeat; /* Evita que la imagen se repita */
        background-position: center center; /* Centra la imagen */
    }
</style>

<br/>
<br/>
<br/>
<div class="container">
    <div class="row justify-content-center">
        <div class="card p-4" style="width: 25rem; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
            <form>
                <div class="text-center">
                    <svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" fill="currentColor" class="bi bi-person-circle" viewBox="0 0 16 16">
                        <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z" />
                        <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z" />
                    </svg>
                </div>
                <h2 class="mb-3 text-center">Iniciar Sesión</h2>

                @if (!string.IsNullOrEmpty(mensajeError))
                {
                    <div class="alert alert-warning text-center" role="alert">
                        <small class="text-dark"><strong>@mensajeError</strong></small>
                    </div>
                } 

                <div class="form-group mb-3">
                    <input type="email" class="form-control" @bind="model.UserName" placeholder="User Name">
                </div>
                <div class="form-group mb-3">
                    <input type="password" class="form-control" @bind="model.Password" placeholder="Password">
                </div>
                
            </form>
            <div class="d-flex justify-content-center">
                <button type="button" class="btn btn-primary" @onclick="Authenticate">Sign In</button>
            </div>
            <br>
            <small>
                    @* ¿Aún no tienes una cuenta? <a href="#">Crear Usuario</a> *@
            </small>
        </div>
    </div>
</div>

@code 
{
    private string mensajeError = "";
    private LoginModel model = new LoginModel();

    private class LoginModel
    {
        public string UserName { get; set; } = null!;
        public string Password { get; set; } = null!;
    }

    protected override async Task OnInitializedAsync()
    {
        // Llamada a CrearUsuarioAdmin antes de intentar autenticar
        // await userServices.CrearUsuarioAdmin();
        
        // Resto de tu código OnInitializedAsync
    }

    private async Task Authenticate()
    {
        
    }

    @* private bool VerifyPassword(string enteredPassword, string hashedPassword)
    {
        // Utiliza BCrypt.Net para verificar si la contraseña coincide con el hash
        // return BCrypt.Net.BCrypt.Verify(enteredPassword, hashedPassword);
    } *@
    void CrearUsuario()
    {
        // urlHelper.NavigateTo("/usuario/crear", true);
    }
}